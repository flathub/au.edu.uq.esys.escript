--- a/site_scons/site_init.py	2024-09-05 11:48:29.857112066 -0500
+++ n/site_scons/site_init.py	2024-09-05 17:14:01.380807626 -0500
@@ -37,12 +37,16 @@
 
 def findLibWithHeader(env, libs, header, paths, lang='c++', try_link=True):
     from SCons.Script.SConscript import Configure
+    print(">libs",libs) #///////
+    print(">header",header)  #////////
+    print(">paths",paths)  #////////
+
     inc_path=''
     lib_path=''
     # 'paths' may be a prefix, so look for lib and include subdirectories
     if type(paths)==str:
         # find the header file first
-        for i in 'include','include64','include32','inc':
+        for i in '','include','include64','include32','inc':
             inc=os.path.join(paths, i)
             if os.path.isfile(os.path.join(inc, header)):
                 inc_path=inc
@@ -51,7 +55,7 @@
             raise RuntimeError('%s not found under %s'%(header,paths))
 
         # now try to find a lib directory
-        for l in 'lib','lib64','lib32':
+        for l in '','lib','lib64','lib32':
             lp=os.path.join(paths, l)
             if os.path.isdir(lp):
                 lib_path=lp
@@ -59,7 +63,9 @@
         if lib_path=='':
             raise RuntimeError('No lib directory found under %s'%paths)
     else:
-        if os.path.isfile(os.path.join(paths[0], header)):
+        _s_inc=os.path.join(paths[0], header)
+        print(">ruta :",_s_inc," tipo :", type(_s_inc),os.path.isfile(_s_inc))
+        if os.path.isfile(_s_inc):
             inc_path=paths[0]
         else:
             raise RuntimeError('%s not found under %s'%(header,paths[0]))
@@ -79,9 +85,13 @@
         # each other, so we add all libraries to the link line and check only
         # for one
         conf.env.AppendUnique(LIBS = libs)
-        if not conf.CheckLibWithHeader(libs[0], header, lang):
-            conf.Finish()
-            raise RuntimeError('Unable to link against %s (paths: %s, %s)'%(libs,inc_path,lib_path))
+        print("x> libs[0]",libs[0])
+        print("x> header",header)
+        print("x> lang",lang)
+        #if not conf.CheckLibWithHeader(libs[0], header, lang):
+           # conf.Finish()
+           # print("xXxxxxxxxxxxx")
+           # raise RuntimeError('Unable to link against %s (paths: %s, %s)'%(libs,inc_path,lib_path))
 
         conf.Finish()
     return inc_path, lib_path
